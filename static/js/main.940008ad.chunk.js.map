{"version":3,"sources":["constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","components/Mainpage.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","console","log","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","CounterButton","count","nextProps","nextState","color","onClick","Header","MainPage","filteredRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","ErrorBoundry","App","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.940008ad.chunk.js","sourcesContent":["export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())\n  ","import React from 'react';\n \nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        aria-label=\"Search\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  console.log('Scroll');\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    console.log('ErrorBoundary');\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react';\n\nclass CounterButton extends Component {\n  \n  state = {\n    count: 0\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    console.log('counter');\n    return (\n      <button\n        id='counter'\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton","import React, {Component} from 'react';\nimport CounterButton from './CounterButton';\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log('header')\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton />\n      </div>\n    );\n  }\n};\n\nexport default Header;","import React, { Component } from 'react';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport './Mainpage.css';\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n    filteredRobots = () => {\n        return this.props.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n    })\n  }\n\n  render() {\n    const { robots, onSearchChange, isPending } = this.props;\n\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={this.filteredRobots()} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport MainPage from '../components/Mainpage';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <MainPage { ...this.props }/>\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n} \n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css'; \n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}